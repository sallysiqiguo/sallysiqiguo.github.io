{"version":3,"sources":["Emoji.js","App.js","serviceWorker.js","index.js","file/resume.pdf"],"names":["Emoji","props","react_default","a","createElement","className","role","aria-label","label","aria-hidden","symbol","App","Fade_default","cascade","duration","class","href","resume","uk-icon","delay","src_Emoji","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.24ab93b0.chunk.js","sourcesContent":["import React from 'react';\nconst Emoji = props => (\n    <span\n        className=\"emoji\"\n        role=\"img\"\n        aria-label={props.label ? props.label : \"\"}\n        aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n        {props.symbol}\n    </span>\n);\nexport default Emoji;","import React, { Component } from 'react';\nimport Fade from 'react-reveal/Fade';\nimport Emoji from './Emoji';\n\nimport './App.css';\nimport resume from \"./file/resume.pdf\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Fade cascade duration={2000}>\n          <div className=\"header uk-align-center\">\n            <h1 className=\"uk-text-bold uk-text-center\">Hi, I'm Sally.</h1>\n            <p className=\"intro\">I’m a software engineer and aspiring data scientist who's passionate about building things, breaking things, and telling stories with data.</p>\n            <div className=\"buttons\">\n              <a class=\"button uk-button uk-button-default\" href={resume}> R&eacute;sum&eacute; </a>\n              <a class=\"button uk-button uk-button-default\" href=\"mailto:sguo0121@gmail.com\">Contact</a>\n            </div>\n            <div className=\"social-links\">\n              <a href=\"https://dev.to/sallysiqiguo/\" uk-icon=\"icon: fa-dev; ratio: 2\" className=\"link hvr-grow\"></a>\n              <a href=\"https://www.linkedin.com/in/sally-siqi-guo/\" uk-icon=\"icon: linkedin; ratio: 2\" className=\"link hvr-grow\"></a>\n              <a href=\"https://github.com/sallysiqiguo/\" uk-icon=\"icon: github; ratio: 2\" className=\"link hvr-grow\"></a>\n              <a href=\"https://medium.com/@sguo0121/\" uk-icon=\"icon: fa-medium; ratio: 2\" className=\"link hvr-grow\"></a>\n            </div>\n          </div>\n        </Fade>\n        <Fade cascade duration={2000} delay={1000}>\n          <div className=\"interest section\">\n            <h2 className=\"uk-text-bold\">I like...</h2>\n            <ul className=\"uk-text-large\">\n              <li>Full-stack and backend development <Emoji symbol=\"👩🏻‍💻\" label=\"woman technologist\"/></li>\n              <li>Statistics and Machine Learning (also my major in college!) <Emoji symbol=\"📊\" label=\"bar chart\"/></li>\n              <li>Application Security <Emoji symbol=\"🛡\" label=\"shield\"/></li>\n              <li>The Office <Emoji symbol=\"🏢\" label=\"office building\"/></li>\n              <li>Pittsburgh Penguins <Emoji symbol=\"🐧\" label=\"penguin\"/><Emoji symbol=\"🏒\" label=\"hockey\"/></li>\n            </ul>\n          </div>\n        </Fade>\n        <Fade cascade duration={2000} delay={2000}>\n          <div className=\"section\">\n            <h2 className=\"uk-text-bold\">I've worked on...</h2>\n            <div className=\"projects\">\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">Mummy Maze</h3>\n                <p>I recreated Popcap Studio's Mummy Maze game using HTML, CSS, JavaScript, and Google Firebase. Implemented a logic-based AI for the non-player character (\"the mummy\") using the Finite State Machine algorithm. This project is deployed via Netlify. </p>\n                <p>Check it out <a href=\"https://mummy-maze-coda3.netlify.com/\">here</a>.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">What's in your stomach?</h3>\n                <p>This is a meal tracking application built with Node Express and postgreSQL database. For this project, I collaborated with a partner, managed version control with Git, and deployed the application via Heroku. </p>\n                <p>Check it out <a href=\"https://whats-in-your-stomach.herokuapp.com\">here</a>.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">CODAmegle</h3>\n                <p>Inspired by Slack, we created a messaging application with a React frontend and a NodeJS backend. Users can send a group message that's visible to all users, or a direct message to another user. New messages will display in real time via web sockets. This project is deployed with a Heroku backend (API) and AWS S3 for the frontend. </p>\n                <p>Check it out <a href=\"http://codamegle.s3-website-us-east-1.amazonaws.com\">here</a>.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">Habbit Rabbit</h3>\n                <p>New Years resolutions? We gotchu. Track your habits everyday with Habbit Rabbit! This application is built with a React frontend and a NodeJS backend. When the clock hits midnight, a cron script will generate a new record for each habit for the new day. The project is deployed using AWS EC2, Docker, and S3. </p>\n                <p>Only available internally at Capital One.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">Natural Language Processing</h3>\n                {/* <p class=\"uk-text-meta uk-margin-remove-top\">Wikipedia question/answer system</p> */}\n                <p>As a part of Natural Language Processing (11-411) at CMU, my team of 3 built a system that takes in a wikipedia article on a subject and can either answer or ask questions about that subject. The program is written in Python and utilizes the nltk parser to parse the sentence structure.</p>\n                <p>Demo link coming soon.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">NHL Twitter Bot</h3>\n                <p>A twitter bot that tweet like an NHL PR team. It selects 5 random NHL teams and studies their twitter feed in a Markov Chain model, and generates a tweet that contain similar information (that usually doesn't make sense). The bot is deployed via Heroku. </p>\n                <p>Check out the bot <a href=\"https://twitter.com/EveryNHLTeamBot\">here</a>.</p>\n              </div>\n              <div class=\"uk-card uk-card-default uk-card-body project\">\n                <h3 class=\"uk-card-title\">Pittsburgh Pawngrabbers</h3>\n                <p>Freelance contributing developer for the Pittsburgh Pawngrabbers website.</p>\n                <p>Link coming soon.</p>\n              </div>\n            </div>\n          </div>\n        </Fade>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/resume.7dd79a83.pdf\";"],"sourceRoot":""}